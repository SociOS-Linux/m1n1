var searchIndex = JSON.parse('{\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[null],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"cstr_core":{"doc":"","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CStr","CString","FromBytesWithNulError","IntoStringError","NulError","as_bytes","as_bytes_with_nul","as_c_str","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cstr","default","deref","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","from_raw","from_vec_unchecked","hash","hash","index","into","into","into","into","into_boxed_c_str","into_bytes","into_bytes_with_nul","into_c_string","into_cstring","into_raw","into_string","into_vec","ne","ne","ne","ne","new","nul_position","partial_cmp","partial_cmp","to_bytes","to_bytes_with_nul","to_owned","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string_lossy","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utf8_error"],"q":["cstr_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Representation of a borrowed C string.","A type representing an owned, C-compatible, nul-terminated …","An error indicating that a nul byte was not in the …","An error indicating invalid UTF-8 when converting a <code>CString</code>…","An error indicating that an interior nul byte was found.","Returns the contents of this <code>CString</code> as a slice of bytes.","Equivalent to the <code>as_bytes</code> function except that the …","Extracts a <code>CStr</code> slice containing the entire string.","Returns the inner pointer to this C string.","","","","","","","","","","","","","","Re-export c_char","","","","","","","","","","","Generate a CStr at compile time that is guaranteed to be …","Creates an empty <code>CString</code>.","","","","","","","","","","","","","","","","","","","Converts a <code>Box</code><code>&lt;CStr&gt;</code> into a <code>CString</code> without copying or …","","","","Creates a C string wrapper from a byte slice.","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","Retakes ownership of a <code>CString</code> that was transferred to C …","Creates a C-compatible string from a byte vector without …","","","","","","","","Converts this <code>CString</code> into a boxed <code>CStr</code>.","Consumes the <code>CString</code> and returns the underlying byte …","Equivalent to the <code>into_bytes</code> function except that the …","Converts a <code>Box</code><code>&lt;CStr&gt;</code> into a <code>CString</code> without copying or …","Consumes this error, returning original <code>CString</code> which …","Consumes the <code>CString</code> and transfers ownership of the string …","Converts the <code>CString</code> into a <code>String</code> if it contains valid …","Consumes this error, returning the underlying vector of …","","","","","Creates a new C-compatible string from a container of …","Returns the position of the nul byte in the slice that was …","","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","","","","","","Yields a <code>&amp;str</code> slice if the <code>CStr</code> contains valid UTF-8.","","","","Converts a <code>CStr</code> into a <code>Cow</code><code>&lt;</code>[<code>str</code>]<code>&gt;</code>.","","","","","","","","","","","","","","Access the underlying UTF-8 error that was the cause of …"],"i":[0,0,0,0,0,1,1,1,2,1,2,1,1,2,3,4,5,1,2,3,4,5,0,1,3,4,5,1,3,4,5,1,2,0,1,1,1,1,2,3,4,5,1,2,3,3,4,4,5,5,1,1,1,1,3,4,5,2,2,2,1,1,1,2,1,1,3,4,5,1,1,1,2,5,1,1,3,1,3,4,5,1,3,1,2,2,2,1,2,3,4,5,2,3,4,5,2,1,3,4,5,1,3,4,5,1,2,3,4,5,5],"f":[null,null,null,null,null,[[]],[[]],[[],["cstr",3]],[[]],[[],["cstr",3]],[[],["cstr",3]],[[],["cstr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["cstring",3]],[[],["nulerror",3]],[[],["frombyteswithnulerror",3]],[[],["intostringerror",3]],[[]],[[]],[[]],[[]],[[["cstring",3]],["ordering",4]],[[["cstr",3]],["ordering",4]],null,[[],["cstring",3]],[[],["cstr",3]],[[]],[[["cstring",3]],["bool",15]],[[["cstr",3]],["bool",15]],[[["nulerror",3]],["bool",15]],[[["frombyteswithnulerror",3]],["bool",15]],[[["intostringerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["cstr",3]],["cstring",3]],[[["cow",4,[["cstr",3]]]]],[[["box",3,[["cstr",3]]]],["cstring",3]],[[]],[[]],[[]],[[],["result",4,[["cstr",3],["frombyteswithnulerror",3]]]],[[],["cstr",3]],[[],["cstr",3]],[[],["cstring",3]],[[["vec",3,[["u8",15]]]],["cstring",3]],[[]],[[]],[[["rangefull",3]],["cstr",3]],[[]],[[]],[[]],[[]],[[],["box",3,[["cstr",3]]]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[["box",3,[["cstr",3]]]],["cstring",3]],[[],["cstring",3]],[[]],[[],["result",4,[["string",3],["intostringerror",3]]]],[[],["vec",3,[["u8",15]]]],[[["cstring",3]],["bool",15]],[[["nulerror",3]],["bool",15]],[[["frombyteswithnulerror",3]],["bool",15]],[[["intostringerror",3]],["bool",15]],[[["into",8,[["vec",3,[["u8",15]]]]]],["result",4,[["cstring",3],["nulerror",3]]]],[[],["usize",15]],[[["cstring",3]],["option",4,[["ordering",4]]]],[[["cstr",3]],["option",4,[["ordering",4]]]],[[]],[[]],[[]],[[],["cstring",3]],[[]],[[]],[[]],[[],["result",4,[["str",15],["utf8error",3]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["cow",4,[["str",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["utf8error",3]]],"p":[[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"]]},\
"cty":{"doc":"Type aliases to C types like c_int for use with bindgen","t":[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"n":["c_char","c_double","c_float","c_int","c_long","c_longlong","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","int16_t","int32_t","int64_t","int8_t","intmax_t","intptr_t","ptrdiff_t","size_t","ssize_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t"],"q":["cty","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"fatfs":{"doc":"A FAT filesystem library implemented in Rust.","t":[18,13,13,13,18,3,3,6,3,3,3,13,13,4,16,13,13,13,4,3,3,3,3,3,3,3,18,8,13,13,13,8,8,18,3,13,13,3,8,18,8,8,8,18,8,4,13,3,8,13,13,18,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,14,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,14,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,12,12,12,12,12],"n":["ARCHIVE","AlreadyExists","CorruptedFileSystem","Current","DIRECTORY","Date","DateTime","DefaultTimeProvider","Dir","DirEntry","DirIter","DirectoryIsNotEmpty","End","Error","Error","Fat12","Fat16","Fat32","FatType","File","FileAttributes","FileSystem","FileSystemStats","FormatVolumeOptions","FsOptions","FsStatusFlags","HIDDEN","IntoStorage","InvalidFileNameLength","InvalidInput","Io","IoBase","IoError","LFN","LossyOemCpConverter","NotEnoughSpace","NotFound","NullTimeProvider","OemCpConverter","READ_ONLY","Read","ReadSeek","ReadWriteSeek","SYSTEM","Seek","SeekFrom","Start","Time","TimeProvider","UnexpectedEof","UnsupportedFileNameCharacter","VOLUME_ID","Write","WriteZero","accessed","all","attributes","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_per_cluster","bytes_per_sector","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster_size","cluster_size","cmp","complement","contains","create_dir","create_file","created","date","day","debug","decode","decode","default","default","default","default","default","difference","dirty","drive_num","drop","drop","empty","encode","encode","eq","eq","eq","eq","eq","eq","eq","error","extend","fat_type","fat_type","fats","file_name","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_volume","free_clusters","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_current_date","get_current_date","get_current_date_time","get_current_date_time","hash","heads","hour","info","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_storage","io_error","is_all","is_dir","is_empty","is_file","is_interrupted","is_interrupted","iter","len","log","long_file_name_as_ucs2_units","max_root_dir_entries","media","millis","min","modified","month","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new_unexpected_eof_error","new_unexpected_eof_error","new_write_zero_error","new_write_zero_error","next","not","oem_cp_converter","open_dir","open_file","partial_cmp","read","read","read_exact","read_exact","read_status_flags","read_volume_label_from_root_dir","read_volume_label_from_root_dir_as_bytes","remove","remove","rename","root_dir","sec","sectors_per_track","seek","seek","set","set_accessed","set_created","set_modified","short_file_name","short_file_name_as_bytes","stats","sub","sub_assign","symmetric_difference","time","time_provider","to_dir","to_file","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","total_clusters","total_sectors","trace","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unmount","update_accessed_date","volume_id","volume_id","volume_label","volume_label","volume_label_as_bytes","warn","write","write","write_all","write_all","year","0","0","0","0"],"q":["fatfsfatfs::Error","fatfs::SeekFrom","",""],"d":["","A file or a directory with the same name already exists.","File system internal structures are corrupted/invalid.","Sets the offset to the current position plus the specified …","","A DOS compatible date.","A DOS compatible date and time.","","A FAT filesystem directory.","A FAT directory entry.","An iterator over the directory entries.","An operation cannot be finished because a directory is not …","Sets the offset to the size of this object plus the …","Error enum with all errors that can be returned by …","Type of errors returned by input/output operations.","12 bits per FAT entry","16 bits per FAT entry","32 bits per FAT entry","A type of FAT filesystem.","A FAT filesystem file object used for reading and writing …","A FAT file attributes.","A FAT filesystem object.","A FAT volume statistics.","A FAT filesystem formatting options","A FAT filesystem mount options.","A FAT volume status flags retrived from the Boot Sector …","","","The provided file name is either too long or empty.","A parameter was incorrect.","A user provided storage instance returned an error during …","Provides IO error as an associated type.","Trait that should be implemented by errors returned from …","","Default implementation of <code>OemCpConverter</code> that changes all …","There is not enough free space on the storage to finish …","A requested file or directory has not been found.","<code>TimeProvider</code> implementation that always returns DOS …","An OEM code page encoder/decoder.","","The <code>Read</code> trait allows for reading bytes from a source.","A sum of <code>Read</code> and <code>Seek</code> traits.","A sum of <code>Read</code>, <code>Write</code> and <code>Seek</code> traits.","","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","Sets the offset to the provided number of bytes.","A DOS compatible time.","A current time and date provider.","A read operation cannot be completed because an end of a …","The provided file name contains an invalid character.","","The <code>Write</code> trait allows for writing bytes into the sink.","A write operation cannot be completed because <code>Write::write</code> …","Returns file last access date.","Returns the set containing all flags.","Returns file attributes.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set size of cluster in bytes (must be dividable by sector …","Set sector size in bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cluster size in bytes","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Creates new directory or opens existing.","Creates new or opens existing file=.","Returns file creation date and time.","A date part","Day of the month - [1, 31]","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Checks if the volume is marked as dirty.","Set drive number for Bios Parameters Block","","","Returns an empty set of flags.","","","","","","","","","","","","Returns a type of File Allocation Table (FAT) used by this …","Set File Allocation Table type","Set number of File Allocation Tables","Returns long file name or if it doesn’t exist fallbacks …","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","","","","","Create FAT filesystem on a disk or partition (format a …","Number of free clusters","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","Set number of heads for Bios Parameters Block (INT 13h CHS …","Hours after midnight - [0, 23]","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","Checks if the volume has the IO Error flag active.","Returns <code>true</code> if all flags are currently set.","Checks if entry belongs to directory.","Returns <code>true</code> if no flags are currently stored.","Checks if entry belongs to regular file.","","","Creates directory entries iterator.","Returns file size or 0 for directory.","","Returns long file name as u16 array slice.","Set maximal numer of entries in root directory for …","Set media field for Bios Parameters Block","Milliseconds after the second - [0, 999]","Minutes after the hour - [0, 59]","Returns file last modification date and time.","Month of the year - [1, 12]","","","","","","","Creates a new filesystem object instance.","Creates a <code>FsOptions</code> struct with default options.","","Create options struct for <code>format_volume</code> function","Creates a new <code>Date</code> instance.","Creates a new <code>Time</code> instance.","","","","","","","","Returns the complement of this set of flags.","Changes default OEM code page encoder-decoder.","Opens existing subdirectory.","Opens existing file.","","Pull some bytes from this source into the specified …","","Read the exact number of bytes required to fill <code>buf</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Returns status flags for this volume.","Returns a volume label from root directory as <code>String</code>.","Returns a volume label from root directory as byte array.","Removes existing file or directory.","Removes the specified flags in-place.","Renames or moves existing file or directory.","Returns a root directory object allowing for futher …","Seconds after the minute - [0, 59]","Set number of physical sectors per track for Bios …","Seek to an offset, in bytes, in a stream.","","Inserts or removes the specified flags depending on the …","Sets date of last access for this file.","Sets date and time of creation for this file.","Sets date and time of last modification for this file.","Returns short file name.","Returns short file name as byte array slice.","Returns filesystem statistics like number of total and …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Changes default time provider.","Returns <code>Dir</code> struct for this entry.","Returns <code>File</code> struct for this entry.","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Number of total clusters in filesystem usable for file …","Set total number of sectors","","Truncate file in current position.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unmounts the filesystem.","If enabled accessed date field in directory entry is …","Returns a volume identifier read from BPB in the Boot …","Set volume ID for Bios Parameters Block","Returns a volume label from BPB in the Boot Sector as …","Set volume label","Returns a volume label from BPB in the Boot Sector as byte …","","Write a buffer into this writer, returning how many bytes …","","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Full year - [1980, 2107]","","","",""],"i":[1,2,2,3,1,0,0,0,0,0,0,2,3,0,4,5,5,5,0,0,0,0,0,0,0,0,1,0,2,2,2,0,0,1,0,2,2,0,0,1,0,0,0,1,0,0,3,0,0,2,2,1,0,2,6,1,6,1,1,1,1,1,1,1,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,15,15,7,8,9,1,6,5,11,12,13,14,15,16,17,18,19,7,8,9,1,6,5,11,12,13,14,15,16,17,18,19,10,13,1,1,1,7,7,6,18,16,0,20,14,1,12,14,15,19,1,11,15,9,10,1,20,14,1,5,11,13,16,17,18,0,1,10,15,15,6,21,9,1,1,1,1,1,6,2,2,5,11,12,13,14,15,16,17,18,19,0,13,7,8,9,10,3,1,6,2,2,5,11,12,13,14,15,16,17,18,19,1,1,1,1,22,19,22,19,1,15,17,0,1,1,1,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,8,23,11,1,6,1,6,24,2,7,6,0,6,15,15,17,17,6,16,1,11,13,16,17,18,10,12,14,15,16,17,18,19,24,2,24,2,8,1,12,7,7,1,25,9,25,25,10,10,10,7,1,7,10,17,15,26,9,1,9,9,9,6,6,10,1,1,1,18,12,6,6,7,8,9,1,6,5,11,12,13,14,15,16,17,18,19,2,1,13,15,0,9,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,7,8,9,10,3,1,6,2,5,11,12,13,14,15,16,17,18,19,1,10,12,10,15,10,15,10,0,21,9,21,21,16,27,28,29,30],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["date",3]],[[]],[[],["fileattributes",3]],[[]],[[]],[[["fileattributes",3]]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u16",15]]],[[]],[[]],[[]],[[],["fileattributes",3]],[[],["direntry",3]],[[],["fattype",4]],[[],["fsstatusflags",3]],[[],["fsoptions",3]],[[],["filesystemstats",3]],[[],["lossyoemcpconverter",3]],[[],["formatvolumeoptions",3]],[[],["date",3]],[[],["time",3]],[[],["datetime",3]],[[],["nulltimeprovider",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[["fileattributes",3]],["ordering",4]],[[]],[[],["bool",15]],[[["str",15]],["result",4,[["error",4]]]],[[["str",15]],["result",4,[["file",3],["error",4]]]],[[],["datetime",3]],null,null,null,[[["u8",15]],["char",15]],[[["u8",15]],["char",15]],[[],["fileattributes",3]],[[],["fsoptions",3]],[[],["lossyoemcpconverter",3]],[[],["formatvolumeoptions",3]],[[],["nulltimeprovider",3]],[[]],[[],["bool",15]],[[["u8",15]]],[[]],[[]],[[]],[[["char",15]],["option",4,[["u8",15]]]],[[["char",15]],["option",4,[["u8",15]]]],[[["fileattributes",3]],["bool",15]],[[["fattype",4]],["bool",15]],[[["fsstatusflags",3]],["bool",15]],[[["filesystemstats",3]],["bool",15]],[[["date",3]],["bool",15]],[[["time",3]],["bool",15]],[[["datetime",3]],["bool",15]],null,[[["intoiterator",8]]],[[],["fattype",4]],[[["fattype",4]]],[[["u8",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatvolumeoptions",3]],["result",4,[["error",4]]]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],["option",4]],[[["u8",15]]],[[["u8",15]]],[[["intoiterator",8]]],[[],["date",3]],[[],["date",3]],[[],["datetime",3]],[[],["datetime",3]],[[]],[[["u16",15]]],null,null,[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["diriter",3]],[[],["u64",15]],null,[[],["option",4]],[[["u16",15]]],[[["u8",15]]],null,null,[[],["datetime",3]],null,[[["fileattributes",3]],["bool",15]],[[["fsstatusflags",3]],["bool",15]],[[["filesystemstats",3]],["bool",15]],[[["date",3]],["bool",15]],[[["time",3]],["bool",15]],[[["datetime",3]],["bool",15]],[[["intostorage",8],["fsoptions",3]],["result",4,[["error",4]]]],[[]],[[]],[[]],[[["u16",15],["u16",15],["u16",15]]],[[["u16",15],["u16",15],["u16",15],["u16",15]]],[[["date",3],["time",3]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[["oemcpconverter",8]],["fsoptions",3,[["oemcpconverter",8]]]],[[["str",15]],["result",4,[["error",4]]]],[[["str",15]],["result",4,[["file",3],["error",4]]]],[[["fileattributes",3]],["option",4,[["ordering",4]]]],[[],["result",4,[["usize",15]]]],[[],["result",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["fsstatusflags",3],["error",4]]]],[[],["result",4,[["option",4,[["string",3]]],["error",4]]]],[[],["result",4,[["option",4],["error",4]]]],[[["str",15]],["result",4,[["error",4]]]],[[]],[[["str",15],["dir",3],["str",15]],["result",4,[["error",4]]]],[[],["dir",3]],null,[[["u16",15]]],[[["seekfrom",4]],["result",4,[["u64",15]]]],[[["seekfrom",4]],["result",4,[["u64",15]]]],[[["bool",15]]],[[["date",3]]],[[["datetime",3]]],[[["datetime",3]]],[[],["string",3]],[[]],[[],["result",4,[["filesystemstats",3],["error",4]]]],[[]],[[]],[[]],null,[[["timeprovider",8]],["fsoptions",3,[["timeprovider",8]]]],[[],["dir",3]],[[],["file",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[],["u32",15]],[[["u32",15]]],null,[[],["result",4,[["error",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["result",4,[["error",4]]]],[[["bool",15]]],[[],["u32",15]],[[["u32",15]]],[[],["string",3]],[[]],[[]],null,[[],["result",4,[["usize",15]]]],[[],["result",4,[["usize",15]]]],[[],["result",4]],[[],["result",4]],null,null,null,null,null],"p":[[3,"FileAttributes"],[4,"Error"],[4,"SeekFrom"],[8,"IoBase"],[4,"FatType"],[3,"DirEntry"],[3,"Dir"],[3,"DirIter"],[3,"File"],[3,"FileSystem"],[3,"FsStatusFlags"],[3,"FsOptions"],[3,"FileSystemStats"],[3,"LossyOemCpConverter"],[3,"FormatVolumeOptions"],[3,"Date"],[3,"Time"],[3,"DateTime"],[3,"NullTimeProvider"],[8,"OemCpConverter"],[8,"Write"],[8,"TimeProvider"],[8,"IntoStorage"],[8,"IoError"],[8,"Read"],[8,"Seek"],[13,"Io"],[13,"Start"],[13,"End"],[13,"Current"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the info level.","","","","","","","","","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,5,6,0,9,1,1,2,2,5,6,8,0,3,4,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,3,4,5,6,2,1,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arguments",3]],[[["arguments",3]],["recordbuilder",3]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["record",3]],[[],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[],["level",4]],[[],["levelfilter",4]],[[],["record",3]],[[],["metadata",3]],[[["level",4]],["ordering",4]],[[["levelfilter",4]],["ordering",4]],[[["metadata",3]],["ordering",4]],[[["metadatabuilder",3]],["ordering",4]],null,[[["metadata",3]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],null,[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["level",4]]]],[[["str",15]],["result",4,[["levelfilter",4]]]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[],["level",4]],[[["level",4]],["recordbuilder",3]],[[],["level",4]],[[["level",4]],["metadatabuilder",3]],[[],["option",4,[["u32",15]]]],[[["option",4,[["u32",15]]]],["recordbuilder",3]],[[["record",3]]],null,null,[[],["log",8]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[],["metadata",3]],[[["metadata",3]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["levelfilter",4]],["option",4,[["ordering",4]]]],[[["level",4]],["option",4,[["ordering",4]]]],[[["level",4]],["option",4,[["ordering",4]]]],[[["levelfilter",4]],["option",4,[["ordering",4]]]],[[["metadata",3]],["option",4,[["ordering",4]]]],[[["metadatabuilder",3]],["option",4,[["ordering",4]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["levelfilter",4]]],[[],["str",15]],[[["str",15]],["recordbuilder",3]],[[],["str",15]],[[["str",15]],["metadatabuilder",3]],[[],["option",4,[["level",4]]]],[[],["levelfilter",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,0,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,3,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_reverse","clone","clone","clone","clone","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","memchr::memmem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","","","","","","","","","","","","","","","","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memrchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Creates a new iterator that yields all positions of needle …","Creates a new iterator that yields all positions of needle …","Create a new <code>Memchr3</code> that’s initialized to zero with a …","","","","","","","","","","","","","","","","","","","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a reverse finder using the given needle from the …","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all occurrences of a substring in …","Returns an iterator over all occurrences of a substring in …","","","","","","","","","","","","","","","","","","","","","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all occurrences of a …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,4,0,0,0,0,0,4,0,5,6,4,7,8,5,6,9,4,7,8,5,6,9,9,9,4,5,6,9,4,9,0,5,0,5,4,7,8,5,6,9,4,7,8,5,6,9,4,7,8,5,6,9,7,8,5,6,5,6,9,7,8,9,0,6,0,6,4,7,8,5,6,9,4,7,8,5,6,9,4,7,8,5,6,9],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15]],["memchr2",3]],[[["u8",15],["u8",15],["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15],["u8",15]],["memchr3",3]],[[["u8",15]],["memchr",3]],null,[[["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15]],["rev",3,[["memchr2",3]]]],[[["u8",15],["u8",15],["u8",15]],["option",4,[["usize",15]]]],[[["u8",15],["u8",15],["u8",15]],["rev",3,[["memchr3",3]]]],[[["u8",15]],["rev",3,[["memchr",3]]]],[[["u8",15]],["memchr",3]],[[["u8",15],["u8",15]],["memchr2",3]],[[["u8",15],["u8",15],["u8",15]],["memchr3",3]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["finder",3]],[[],["finderrev",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["finder",3]],[[],["finderrev",3]],[[],["prefilter",4]],[[],["finder",3]],[[],["finderrev",3]],[[],["finderbuilder",3]],[[],["prefilter",4]],[[],["finderbuilder",3]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["finditer",3]],[[],["finditer",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["finder",3]],[[],["finderrev",3]],[[],["finderbuilder",3]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[["prefilter",4]],["finderbuilder",3]],[[],["option",4,[["usize",15]]]],[[["asref",8]],["option",4,[["usize",15]]]],[[],["findreviter",3]],[[],["findreviter",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"],[4,"Prefilter"],[3,"Finder"],[3,"FinderRev"],[3,"FindIter"],[3,"FindRevIter"],[3,"FinderBuilder"]]},\
"uuid":{"doc":"Generate and parse universally unique identifiers (UUIDs).","t":[3,6,13,3,13,13,13,13,18,18,18,18,13,13,13,13,13,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,3,3,18,18,18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Builder","Bytes","Dce","Error","Future","Mac","Md5","Microsoft","NAMESPACE_DNS","NAMESPACE_OID","NAMESPACE_URL","NAMESPACE_X500","NCS","Nil","RFC4122","Random","Sha1","Uuid","Variant","Version","as_braced","as_bytes","as_fields","as_hyphenated","as_ref","as_simple","as_u128","as_u64_pair","as_urn","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","braced","clone","clone","clone","clone","cmp","default","encode_buffer","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_le","from_bytes_le","from_bytes_ref","from_fields","from_fields","from_fields_le","from_fields_le","from_random_bytes","from_slice","from_slice","from_slice_le","from_slice_le","from_str","from_u128","from_u128","from_u128_le","from_u128_le","from_u64_pair","get_variant","get_version","get_version_num","hash","hash","hyphenated","into","into","into","into","into","into_uuid","is_nil","ne","ne","nil","nil","parse_str","partial_cmp","set_variant","set_version","simple","to_fields_le","to_u128_le","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_parse","type_id","type_id","type_id","type_id","type_id","urn","uuid","with_variant","with_version","Braced","Hyphenated","LENGTH","LENGTH","LENGTH","LENGTH","Simple","Urn","as_ref","as_ref","as_ref","as_ref","as_uuid","as_uuid","as_uuid","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","default","default","default","encode_lower","encode_lower","encode_lower","encode_lower","encode_upper","encode_upper","encode_upper","encode_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_uuid","from_uuid","from_uuid","from_uuid","hash","hash","hash","hash","into","into","into","into","into_uuid","into_uuid","into_uuid","into_uuid","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["uuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uuid::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A builder struct for creating a UUID.","A 128-bit (16 byte) buffer containing the ID.","Version 2: DCE Security.","A general error that can occur when working with UUIDs.","Reserved for future expansion.","Version 1: MAC address.","Version 3: MD5 hash.","Reserved by Microsoft for backward compatibility.","UUID namespace for Domain Name System (DNS).","UUID namespace for ISO Object Identifiers (OIDs).","UUID namespace for Uniform Resource Locators (URLs).","UUID namespace for X.500 Distinguished Names (DNs).","Reserved by the NCS for backward compatibility.","Special case for <code>nil</code> UUID.","As described in the RFC4122 Specification (default).","Version 4: Random.","Version 5: SHA-1 hash.","A Universally Unique Identifier (UUID).","The reserved variants of UUIDs.","The version of the UUID, denoting the generating algorithm.","Get a borrowed <code>Braced</code> formatter.","Returns an array of 16 octets containing the UUID data.","Returns the four field values of the UUID.","Get a borrowed <code>Hyphenated</code> formatter.","","Get a borrowed <code>Simple</code> formatter.","Returns a 128bit value containing the UUID data.","Returns two 64bit values containing the UUID data.","Get a borrowed <code>Urn</code> formatter.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","Get a <code>Braced</code> formatter.","","","","","","","A buffer that can be used for <code>encode_...</code> calls, that is …","","","","","Adapters for alternative string formats.","","","","","","","","","","","","","","","","","","","","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a reference to a UUID from a reference to the …","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values.","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values in little-endian …","Creates a <code>Builder</code> using the supplied random bytes.","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","","Creates a <code>Builder</code> from a 128bit value.","Creates a UUID from a 128bit value.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from two 64bit values.","Returns the variant of the UUID structure.","Returns the version of the UUID.","Returns the version number of the UUID.","","","Get a <code>Hyphenated</code> formatter.","","","","","","Convert the builder into a <code>Uuid</code>.","Tests if the UUID is nil.","","","Creates a <code>Builder</code> with an initial <code>Uuid::nil</code>.","The ‘nil UUID’.","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Get a <code>Simple</code> formatter.","Returns the four field values of the UUID in little-endian …","Returns a 128bit little-endian value containing the UUID …","","","","","","","","","","","","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","","","","","Get a <code>Urn</code> formatter.","Parse <code>Uuid</code>s from string literals at compile time.","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Format a <code>Uuid</code> as a braced hyphenated string, like …","Format a <code>Uuid</code> as a hyphenated string, like …","The length of a hyphenated <code>Uuid</code> string.","The length of a simple <code>Uuid</code> string.","The length of a URN <code>Uuid</code> string.","The length of a braced <code>Uuid</code> string.","Format a <code>Uuid</code> as a simple string, like …","Format a <code>Uuid</code> as a URN string, like …","","","","","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Writes the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…","Writes the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as a lower-case hyphenated string …","Writes the <code>Uuid</code> as an upper-case hyphenated string to …","Writes the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as an upper-case hyphenated string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Hyphenated</code> from a <code>Uuid</code>.","Creates a <code>Simple</code> from a <code>Uuid</code>.","Creates a <code>Urn</code> from a <code>Uuid</code>.","Creates a <code>Braced</code> from a <code>Uuid</code>.","","","","","","","","","Consumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,2,1,1,2,3,3,3,3,2,1,2,1,1,0,0,0,3,3,3,3,3,3,3,3,3,4,4,5,1,2,3,4,5,1,2,3,3,5,1,2,3,3,3,3,5,1,2,3,0,4,5,5,1,2,2,3,3,3,3,4,5,1,2,3,3,3,3,3,4,3,4,3,3,4,3,4,3,4,4,3,4,3,3,4,3,4,3,3,3,3,3,5,3,3,4,5,1,2,3,4,3,5,3,4,3,3,3,4,4,3,3,3,4,5,1,2,3,3,4,5,1,2,3,3,4,5,1,2,3,3,0,4,4,0,0,6,7,8,9,0,0,6,7,8,9,6,7,8,9,6,6,7,7,8,8,9,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,6,6,7,7,8,8,9,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["braced",3]],[[],["bytes",6]],[[]],[[],["hyphenated",3]],[[]],[[],["simple",3]],[[],["u128",15]],[[]],[[],["urn",3]],[[],["uuid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["braced",3]],[[],["error",3]],[[],["version",4]],[[],["variant",4]],[[],["uuid",3]],[[["uuid",3]],["ordering",4]],[[]],[[]],[[["error",3]],["bool",15]],[[["version",4]],["bool",15]],[[["variant",4]],["bool",15]],[[["uuid",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["hyphenated",3]]],[[["braced",3]]],[[["urn",3]]],[[["simple",3]]],[[["bytes",6]]],[[["bytes",6]],["uuid",3]],[[["bytes",6]]],[[["bytes",6]],["uuid",3]],[[["bytes",6]],["uuid",3]],[[["u32",15],["u16",15],["u16",15]]],[[["u32",15],["u16",15],["u16",15]],["uuid",3]],[[["u32",15],["u16",15],["u16",15]]],[[["u32",15],["u16",15],["u16",15]],["uuid",3]],[[["bytes",6]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["uuid",3],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["uuid",3],["error",3]]]],[[["str",15]],["result",4]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u64",15],["u64",15]]],[[],["variant",4]],[[],["option",4,[["version",4]]]],[[],["usize",15]],[[]],[[]],[[],["hyphenated",3]],[[]],[[]],[[]],[[]],[[]],[[],["uuid",3]],[[],["bool",15]],[[["error",3]],["bool",15]],[[["uuid",3]],["bool",15]],[[]],[[]],[[["str",15]],["result",4,[["uuid",3],["error",3]]]],[[["uuid",3]],["option",4,[["ordering",4]]]],[[["variant",4]]],[[["version",4]]],[[],["simple",3]],[[]],[[],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4,[["uuid",3],["error",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["urn",3]],null,[[["variant",4]]],[[["version",4]]],null,null,null,null,null,null,null,null,[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[]],[[],["uuid",3]],[[]],[[],["uuid",3]],[[]],[[],["uuid",3]],[[]],[[],["uuid",3]],[[]],[[]],[[]],[[]],[[],["hyphenated",3]],[[],["simple",3]],[[],["urn",3]],[[],["braced",3]],[[["hyphenated",3]],["ordering",4]],[[["simple",3]],["ordering",4]],[[["urn",3]],["ordering",4]],[[["braced",3]],["ordering",4]],[[],["hyphenated",3]],[[],["simple",3]],[[],["urn",3]],[[],["braced",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["hyphenated",3]],["bool",15]],[[["simple",3]],["bool",15]],[[["urn",3]],["bool",15]],[[["braced",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["uuid",3]]],[[["uuid",3]]],[[]],[[["uuid",3]]],[[]],[[["uuid",3]]],[[]],[[["uuid",3]]],[[["uuid",3]]],[[["uuid",3]]],[[["uuid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[],["uuid",3]],[[["hyphenated",3]],["bool",15]],[[["simple",3]],["bool",15]],[[["urn",3]],["bool",15]],[[["braced",3]],["bool",15]],[[["hyphenated",3]],["option",4,[["ordering",4]]]],[[["simple",3]],["option",4,[["ordering",4]]]],[[["urn",3]],["option",4,[["ordering",4]]]],[[["braced",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Version"],[4,"Variant"],[3,"Uuid"],[3,"Builder"],[3,"Error"],[3,"Hyphenated"],[3,"Simple"],[3,"Urn"],[3,"Braced"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};